" Airline setting
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
let g:airline#extensions#tabline#fnamemod=':t'
let g:airline#extensions#tabline#buffer_idx_mode = 1
"let g:airline#extensions#tabline#buffer_nr_show = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab
nnoremap <C-k> :bn<CR>
nnoremap <C-j> :bp<CR>

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" powerline symbols
"let g:airline_powerline_flag=1
if exists('g:airline_powerline_flag')
  let g:airline_powerline_fonts = 1
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif

" tagbar setting
let g:tagbar_width=30
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx,*.lua call tagbar#autoopen()

map <silent> <F2> :NERDTreeTabsToggle<CR>
map <silent> <F3> :TagbarToggle<CR>
map <silent> <F4> :call BufferList()<CR>
map <silent> <F5> :UndotreeToggle<CR>
"map <silent> <F7> :call ChangeBasePath()<CR>
map <silent> <F8> :call OpenF()<CR>
map <leader>p :call OpenF()<CR>

map <leader><space> :FixWhitespace<CR>

map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><leader>l <Plug>(easymotion-lineforward)
map <Leader><leader>. <Plug>(easymotion-repeat)
let g:EasyMotion_smartcase = 1

"sessionman
let g:sessionman_save_threshold = 3

"contrlp
let g:ctrlp_by_filename = 1
let g:ctrlp_lazy_update = 1

"more color for mark
let g:mwDefaultHighlightingPalette = 'maximum'

"easy align
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)

"ctags
set tags=./tags;,tags

"neocomplete
" RE-Enable heavy omni completion.
if count(g:spf13_bundle_groups, 'neocomplete')
    let g:neocomplete#enable_at_startup = 1
    "nnoremap <Leader>c :NeoCompleteEnable<CR>
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    if exists('g:neocomplete#cpp')
        let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
        let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    else
        let g:neocomplete#sources#omni#input_patterns.c = ''
        let g:neocomplete#sources#omni#input_patterns.cpp = ''
    endif
endif

"normal
inoremap jk <Esc>jk
nnoremap <S-l> $
nnoremap <S-h> ^
nnoremap <Leader>ff <C-w>>10
nnoremap <Leader>aa <C-w><10
nnoremap <Leader>g 1<C-g>
set wrap
set nolist
set mouse=n
filetype plugin on

" cscope update the db connection
function CsUpdate()
    let l:csfile=findfile("cscope.out", ".;")
    if l:csfile=="cscope.out"
        let l:csfile=printf("%s/cscope.out", getcwd())
    endif
    if filereadable(l:csfile)
        cs kill -1
        execute "cs" "add" l:csfile
    endif
endfunction
nnoremap <silent><Leader>s :call CsUpdate()<CR>
